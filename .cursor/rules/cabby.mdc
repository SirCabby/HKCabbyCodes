---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for CabbyCodes - Hollow Knight Mod

## CRITICAL ENFORCEMENT RULES - NEVER BYPASS
These rules are ABSOLUTE and must be followed in ALL cases without exception:

### File Organization - ABSOLUTE REQUIREMENT
- **NEVER put more than one class or interface in the same file**
- **ALWAYS create separate .cs files for each class/interface**
- **ALWAYS use descriptive filenames that exactly match the class name**
- **NEVER combine multiple classes in a single file, even for "related" functionality**
- **NEVER create utility classes or helper classes in the same file as main classes**

### Build Verification - ABSOLUTE REQUIREMENT  
- **ALWAYS run `make build` after ANY code changes, regardless of perceived complexity**
- **NEVER assume any change is too small to test**
- **ALWAYS include build verification in every response that involves code changes**
- **ALWAYS report build results and fix any errors immediately**
- **NEVER skip build testing for "minor" changes, comments, or documentation**

### Output File Management - ABSOLUTE REQUIREMENT
- **ALWAYS put ALL generated non-java files in the `/Output` folder**
- **NEVER create files in the root directory or other project folders**
- **ALWAYS use `/Output/` prefix for any generated files**
- **ALWAYS apply this to ALL file generation, not just debugging outputs**
- **NEVER create temporary files, logs, or command outputs outside `/Output`**

## Project Context
This is a Hollow Knight mod project called "CabbyCodes" that provides various cheats and modifications to the game. The project consists of:

- **CabbyCodes**: Main mod DLL with patches for game mechanics, inventory, player stats, etc.
- **CabbyMenu**: UI system for the in-game cheat menu
- **AssemblyTools**: Tools for analyzing game assemblies and finding missing references

## Environment
- **Operating System**: Windows 10/11
- **Shell**: Windows Command Prompt (cmd.exe) preferred over PowerShell unless PowerShell-specific features are required
- **Development**: Visual Studio or VS Code on Windows
- **Game**: Hollow Knight installed via Steam on Windows

## Key Technologies
- **.NET SDK**: 9.0.301 (specified in global.json)
- **Target Framework**: .NET Framework 4.7.2 (net472)
- **C# Language Version**: 7.3
- **BepInEx**: 6.0.0-be.* (modding framework)
- **HarmonyX**: 2.10.2 (for runtime patching)
- **Unity**: 2018.3.5.1 (UI components), 2020.2 (modules)
- **Unity Engine**: Hollow Knight is a Unity game

## Important Files to Consider
- `README.md` - Project overview and documentation
- `Makefile` - Build and deployment scripts
- `global.json` - .NET SDK version specification (9.0.301)
- `CabbyCodes.sln` - Solution file
- `CabbyCodes/CabbyCodes.csproj` - Main project file
- `CabbyMenu/CabbyMenu.csproj` - UI project file

## General Requirements
- Before refactoring work, supply the concrete refactoring plan in chat and let user decide to continue
- Always run a make build to verify changed code is still functional, and proceed with fixing errors if they show
- NEVER run `make deploy` or `make run`

## Common Tasks
- Building and deploying the mod to Hollow Knight
- Adding new patches for game mechanics
- Modifying the in-game cheat menu
- Analyzing game assemblies for new features

## Code Style
- Follow C# 7.3 conventions, no not use features beyond this version
- Use meaningful names for patches and classes
- Add comments for complex game mechanics
- Keep patches focused and single-purpose
- Target .NET Framework 4.7.2 compatibility
- Never put more than one class or interface in the same file
- Do not generate example java files

## Naming Conventions
- **Classes**: PascalCase (e.g., `PlayerPatch`, `InventoryPatch`)
- **Methods**: PascalCase (e.g., `ApplyPatch`, `GetPlayerHealth`)
- **Variables**: camelCase (e.g., `playerHealth`, `maxSoul`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_HEALTH`, `DEFAULT_GEO`)
- **Files**: Match class names (e.g., `PlayerPatch.cs` for `PlayerPatch` class)
- **Namespaces**: Match project structure (e.g., `CabbyCodes.Patches.Player`)

## File Organization
- UI components go in `CabbyMenu/UI/`
- Use subdirectories for related functionality (e.g., `Patches/Inventory/Abilities/`)
- Ensure non-zero and non-string constants go in Constants files.  Game specific constants go in CabbyCodes Constants and Menu specific constants go in CabbyMenu Constants

## Debugging & Logging
- Ask user for logs if needed to understand what is happening during testing
- Include meaningful log messages for debugging that capture many related fields in the various unity components
- Don't use try-catch blocks around game API calls
- Log both success and failure cases for troubleshooting
- Use Makefile build target to test compiling
- Whenever generating non-java files for debugging, such as logs or command outputs, put them in the /Output folder
- Building should not require an output file but git and powershell commands may require it

## Performance Considerations
- Minimize allocations in hot paths
- Cache frequently accessed game objects
- Use `[HarmonyPatch]` attributes efficiently
- Avoid expensive operations in Update loops

## Command Preferences
- Use Windows Command Prompt (`cmd`) commands when possible
- Only use PowerShell when specific PowerShell features are required
- Use `dir` instead of `ls` for directory listing
- Use `copy` instead of `cp` for file copying
- Use `del`